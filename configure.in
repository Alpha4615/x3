dnl Process this file with autoconf to create a configure script.

dnl General initialization.
AC_REVISION([$Id$])
AC_PREREQ(2.60)
AC_INIT([X3],[1.5],[evilnet-devel@lists.sourceforge.net])
CODENAME=X3
AC_CONFIG_HEADERS(src/config.h)
AC_CONFIG_SRCDIR(src/opserv.c)
dnl AM_CANONICAL_TARGET must be before AM_INIT_AUTOMAKE() or autoconf whines
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE([gnu 1.6])
AM_MAINTAINER_MODE

dnl Compiler/runtime feature checks.
AC_TYPE_SIGNAL
AC_C_CONST
AC_C_INLINE

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL

AC_PROG_RANLIB
dnl AC_PROG_LIBTOOL

AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_GCC_TRADITIONAL
AC_CHECK_PROG(MAKER, gmake, gmake, make)

dnl nice that unixes can all follow a standard.
case $target in
  *-freebsd2* | *-freebsdelf2* | *-freebsd*out3*)
    ANSI_SRC=""
    ;;
  *-freebsd3* | *-freebsdelf3* | *-freebsd*out3*)
    ANSI_SRC=""
    ;;
  *-solaris*)
    EXTRA_DEFINE="-D__SOLARIS__"
    ANSI_SRC="-fno-builtin"
    ;;
  *-cygwin)
    ANSI_SRC="-fno-builtin"
    ;;
  *-linux*)
    dnl -D_GNU_SOURCE needed for strsignal()
    EXTRA_DEFINE="-D_GNU_SOURCE"
    ANSI_SRC=""
    ;;
  *)
    ANSI_SRC=""
    ;;
esac
CFLAGS="$CFLAGS $EXTRA_DEFINE"

dnl Checks for libraries.
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(m, main)
AC_CHECK_LIB(GeoIP, GeoIP_open)

dnl Checks for header files.
AC_HEADER_STDC

dnl will be used for portability stuff
AC_HEADER_TIME
AC_STRUCT_TM

dnl Would rather not bail on headers, BSD has alot of the functions elsewhere. -Jedi
AC_CHECK_HEADERS(GeoIP.h GeoIPCity.h fcntl.h tgmath.h malloc.h netdb.h netinet/in.h sys/resource.h sys/timeb.h sys/times.h sys/param.h sys/socket.h sys/time.h sys/types.h sys/wait.h unistd.h getopt.h memory.h arpa/inet.h sys/mman.h sys/stat.h dirent.h ,,)

dnl portability stuff, hurray! -Jedi
AC_CHECK_MEMBER([struct sockaddr.sa_len],
                [AC_DEFINE([HAVE_SOCKADDR_SA_LEN],,[Define if struct sockaddr has sa_len field])],
                [],[#include <sys/types.h>
#include <sys/socket.h>])
AC_CHECK_MEMBER([struct addrinfo.ai_flags],
                [AC_DEFINE([HAVE_STRUCT_ADDRINFO],,[Define if struct addrinfo declared])],
                [],[#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>])

AC_CHECK_FUNCS(gettimeofday)
if test $ac_cv_func_gettimeofday = no; then
  AC_CHECK_FUNCS(ftime,,AC_MSG_ERROR([ftime or gettimeofday required. X3 build will fail.]))
fi

dnl We have fallbacks in case these are missing, so just check for them.
AC_CHECK_FUNCS(freeaddrinfo getaddrinfo getnameinfo getpagesize memcpy memset strdup strerror strsignal localtime_r setrlimit getopt getopt_long sysconf,,)

dnl Check for absolutely required library functions.
AC_CHECK_FUNCS(select socket strcspn strspn strtod strtoul,,AC_MSG_ERROR([a required function was not found. X3 build will fail.]))

dnl Check for functions (and how to get them).
AC_FUNC_ALLOCA
AC_FUNC_MMAP

AC_CACHE_CHECK([for sin_len], ac_cv_sin_len,
[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <sys/types.h>
#include <netinet/in.h>],[struct sockaddr_in *sin; sin->sin_len = 0;])],
ac_cv_sin_len="yes", ac_cv_sin_len="no")])
if test $ac_cv_sin_len = yes ; then
  AC_DEFINE(HAVE_SIN_LEN, 1, [Define if struct sockaddr_in contains a sin_len field])
fi

dnl Check for socklen_t.  In traditional BSD this is an int, but some
dnl OSes use a different type.  Test until we find something that will
dnl work properly.  Test borrowed from a patch submitted for Python.
AC_CHECK_TYPE([socklen_t], ,[
  AC_MSG_CHECKING([for socklen_t equivalent])
  AC_CACHE_VAL([curl_cv_socklen_t_equiv],
  [
dnl Systems have either "struct sockaddr*" or "void*" as second
dnl arg to getpeername.
    curl_cv_socklen_t_equiv=
    for arg2 in "struct sockaddr" void ; do
      for t in int size_t unsigned long "unsigned long" ; do
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>
#include <sys/socket.h>
int getpeername (int $arg2 *, $t *);]], [[$t len;
  getpeername(0, 0, &len);]])],[curl_cv_socklen_t_equiv="$t"
  break],[])
      done
    done
  ])
  AC_MSG_RESULT($curl_cv_socklen_t_equiv)
  AC_DEFINE_UNQUOTED(socklen_t, $curl_cv_socklen_t_equiv,
      [type to use in place of socklen_t if not defined])],
  [#include <sys/types.h>
#include<sys/socket.h>])

dnl Can only check with -Werror, but the rest of configure doesn't like -Werror
OLD_CFLAGS=$CFLAGS
CFLAGS="$CFLAGS -W -Wall -Werror"

dnl Now figure out how to printf() a time_t
AC_MSG_CHECKING(for time_t format)
AC_CACHE_VAL(ac_cv_fmt_time_t, [
ac_cv_fmt_time_t=no
AC_COMPILE_IFELSE([#include <sys/types.h>
#include <stdio.h>
void myfunc(void) {
  time_t test=0;
  printf("%li", test);
}], ac_cv_fmt_time_t="\"%li\"")
if test $ac_cv_fmt_time_t = no; then
AC_COMPILE_IFELSE([#include <sys/types.h>
#include <stdio.h>
void myfunc(void) {
  time_t test=0;
  printf("%i", test);
}], ac_cv_fmt_time_t="\"%i\"")
fi
if test $ac_cv_fmt_time_t = no; then
AC_MSG_ERROR([Cannot detect format string for time_t
Please check sys/types.h for the typedef of time_t and submit to a developer])
fi
])
AC_DEFINE_UNQUOTED(FMT_TIME_T, $ac_cv_fmt_time_t, [Define to printf format for a time_t variable])
AC_MSG_RESULT($ac_cv_fmt_time_t)

dnl How to copy one va_list to another?
AC_CACHE_CHECK([for va_copy], ac_cv_c_va_copy, [AC_LINK_IFELSE(
  [AC_LANG_PROGRAM([#include <stdarg.h>], [va_list ap1, ap2; va_copy(ap1, ap2);])],
  [ac_cv_c_va_copy="yes"],
  [ac_cv_c_va_copy="no"]
)])
if test "$ac_cv_c_va_copy" = "yes" ; then
  AC_DEFINE(HAVE_VA_COPY, 1, [Define if we have va_copy])
fi

AC_CACHE_CHECK([for __va_copy], ac_cv_c___va_copy, [AC_LINK_IFELSE(
  [AC_LANG_PROGRAM([#include <stdarg.h>], [va_list ap1, ap2; __va_copy(ap1, ap2);])],
  [ac_cv_c___va_copy="yes"],
  [ac_cv_c___va_copy="no"]
)])
if test "$ac_cv_c___va_copy" = "yes" ; then
  AC_DEFINE(HAVE___VA_COPY, 1, [Define if we have __va_copy])
fi

dnl Now fix things back up
CFLAGS=$OLD_CFLAGS

dnl Optional features.
AC_MSG_CHECKING(which malloc to use)
AC_ARG_WITH(malloc,
[  --with-malloc=type      Enables use of a special malloc library; one of:
                          system (the default), boehm-gc, dmalloc, mpatrol, x3, slab],
[],
[withval="system"])
if test "x$withval" = "xsystem" ; then
  AC_MSG_RESULT(system)
  AC_DEFINE(WITH_MALLOC_SYSTEM, 1, [Define if using the system's malloc])
  x3_malloc="System"
elif test "x$withval" = "xdmalloc" ; then
  AC_MSG_RESULT(dmalloc)
  AC_CHECK_HEADERS(dmalloc.h,,AC_MSG_ERROR([dmalloc header file missing.  dmalloc build will fail.]))
  AC_CHECK_LIB(dmalloc,malloc,,AC_MSG_ERROR([dmalloc library is missing.  dmalloc build will fail.]))
  AC_DEFINE(WITH_MALLOC_DMALLOC, 1, [Define if using the dmalloc debugging malloc package])
  x3_malloc="DMalloc"
elif test "x$withval" = "xmpatrol" ; then
  AC_MSG_RESULT(mpatrol)
  AC_CHECK_HEADERS(mpatrol.h,,AC_MSG_ERROR([mpatrol header file missing.  mpatrol build will fail.]))
  dnl Using mpatrol requires linking against libelf, at least on Linux.
  AC_CHECK_LIB(elf, elf_begin)
  AC_CHECK_LIB(mpatrol,__mp_atexit,,AC_MSG_ERROR([mpatrol library is missing completely.  mpatrol build will fail.]))
  AC_DEFINE(WITH_MALLOC_MPATROL, 1, [Define if using the mpatrol malloc debugging package])
  x3_malloc="MPatrol"
elif test "x$withval" = "xboehm-gc" ; then
  AC_MSG_RESULT(boehm-gc)
  AC_CHECK_HEADERS(gc/gc.h,,AC_MSG_ERROR([Boehm GC header file missing.  boehm-gc build will fail.]))
  AC_CHECK_LIB(dl, dlopen, , AC_MSG_ERROR([libdl library is missing.  boehm-gc build will fail.]))
  AC_CHECK_LIB(gc, GC_gcollect, , AC_MSG_ERROR([Boehm GC library is missing.  boehm-gc build will fail.]))
  AC_DEFINE(WITH_MALLOC_BOEHM_GC, 1, [Define if using the Boehm GC to garbage collect and check memory leaks])
  x3_malloc="Boehm"
elif test "x$withval" = "xx3" ; then
  AC_MSG_RESULT(x3)
  AC_DEFINE(WITH_MALLOC_X3, 1, [Define if using the X3 internal debug allocator])
  MODULE_OBJS="$MODULE_OBJS alloc-x3.\$(OBJEXT)"
  x3_malloc="X3"
elif test "x$withval" = "xslab" ; then
  AC_MSG_RESULT(slab)
  AC_DEFINE(WITH_MALLOC_SLAB, 1, [Define if using the slab internal debug allocator])
  MODULE_OBJS="$MODULE_OBJS alloc-slab.\$(OBJEXT)"
  x3_malloc="Slab"
else
  AC_MSG_ERROR([Unknown malloc type $withval])
fi

AC_MSG_CHECKING(which protocol to use)
AC_ARG_WITH(protocol,
[  --with-protocol=name    Choose IRC dialect to support; one of:
                          p10 (the default)],
[],
[withval="p10"])
if test "x$withval" = "xp10" ; then
  AC_MSG_RESULT(P10)
  AC_DEFINE(WITH_PROTOCOL_P10, 1, [Define if using the P10 dialect of IRC])
  MODULE_OBJS="$MODULE_OBJS proto-p10.\$(OBJEXT)"
  PROTO_FILES=proto-p10.c
  x3_ircd="P10"
else
  AC_MSG_ERROR([Unknown IRC dialect $withval])
fi

AC_ARG_WITH(getopt,
[  --without-getopt        Disables building of the GNU getopt library],
[if test "$withval" = no; then
  AC_DEFINE(IGNORE_GETOPT, 1, [Define to disable built-in getopt library])
fi])

AC_MSG_CHECKING(whether to enable tokenization)
AC_ARG_ENABLE(tokens,
[  --disable-tokens        Disables tokenization of P10 protocol output
                           (tokens required if linking to ircu 2.10.11)],
[],[enableval=yes])
if test "z$enableval" = zno ; then
  AC_MSG_RESULT(no)
else
  AC_DEFINE(ENABLE_TOKENS, 1, [Define if tokenized P10 desired])
  AC_MSG_RESULT(yes)
fi

AC_MSG_CHECKING(whether to enable debug behaviors)
AC_ARG_ENABLE(debug,
[  --enable-debug          Enables debugging behaviors],
[
  CPPFLAGS="$CPPFLAGS"
  AC_MSG_RESULT(yes)
  x3_debug="Enabled"
],
[
  CPPFLAGS="$CPPFLAGS -DNDEBUG"
  AC_MSG_RESULT(no)
  x3_debug="Disabled"
])

if test -e src ; then
  if test ! -d src ; then
    AC_MSG_ERROR([src exists but is not a directory; please move it out of the way.])
  fi
else
  mkdir src
fi
AC_MSG_CHECKING(for extra module files)
MODULE_DEFINES="src/modules-list.h"
echo > $MODULE_DEFINES
touch $MODULE_DEFINES
AC_ARG_ENABLE(modules,
[  --enable-modules=list,of,modules   Enable extra modules],
[
  OIFS="$IFS"
  IFS=','
  EXTRA_MODULE_OBJS=""
  module_list=""
  dnl Must use a separate file because autoconf can't stand newlines in an AC_SUBSTed variable.
  for module in $enableval ; do
    module=`echo $module | sed -e s/^mod-// -e s/\.c\$//`
    EXTRA_MODULE_OBJS="$EXTRA_MODULE_OBJS mod-$module.\$(OBJEXT)"
    module_list="$module_list $module"
    echo "WITH_MODULE($module)" >> $MODULE_DEFINES
    if test "x$module" = "xtrack" ; then
      TRACK="-D HAVE_TRACK"
      AC_DEFINE(HAVE_TRACK, 1, [Define this if you are using mod-track])
    fi
    if test "x$module" = "xhelpserv" ; then
      TRACK="-D HAVE_HELPSERV"
      AC_DEFINE(HAVE_HELPSERV, 1, [Define this if you are using mod-helpserv])
    fi
  done
  IFS="$OIFS"
  MODULE_OBJS="$MODULE_OBJS $EXTRA_MODULE_OBJS"
  AC_MSG_RESULT($module_list)
],
[
  AC_MSG_RESULT(none)
])

MY_SUBDIRS=""
RX_INCLUDES=""
RX_LIBS=""
if test "${BROKEN_REGEX}" = yes -o "${ac_cv_func_regcomp}" = no; then
  MY_SUBDIRS="rx $MY_SUBDIRS"
  RX_INCLUDES="-I../rx"
  RX_LIBS="../rx/librx.a"
fi
MY_SUBDIRS="$MY_SUBDIRS src"
CFLAGS="$CFLAGS $ANSI_SRC -W -Wall"
if test "z$USE_MAINTAINER_MODE" = zyes ; then
  CFLAGS="$CFLAGS -Werror"
fi

dnl I am not comfortable running make install from ./configure. This has to be done correctly or not at all.  -Rubin
dnl REMEMBER TO CHANGE WITH A NEW TRE RELEASE!
dnl AC_MSG_RESULT(extracting TRE regex library)
dnl cur_dir=`pwd`
dnl cd tools
dnl remove old tre directory to force a recompile...
dnl rm -rf tre-$tre_version
dnl if test "x$ac_cv_path_GUNZIP" = "x" ; then
dnl         tar xfz tre.tar.gz
dnl else
dnl         cp tre.tar.gz tre.tar.gz.bak
dnl         gunzip -f tre.tar.gz
dnl         cp tre.tar.gz.bak tre.tar.gz
dnl         tar xf tre.tar
dnl fi
dnl AC_MSG_RESULT(configuring TRE regex library)
dnl cd tre-$tre_version
dnl tre_prefix=$prefix
dnl if test $tre_prefix = "NONE"; then
dnl     tre_prefix="$HOME"
dnl fi
dnl ./configure --disable-agrep --disable-shared --disable-system-abi --disable-wchar --disable-multibyte --prefix=$tre_prefix || exit 1
dnl
dnl AC_MSG_RESULT(compiling TRE regex library)
dnl $ac_cv_prog_MAKER || exit 1
dnl AC_MSG_RESULT(installing TRE regex library)
dnl $ac_cv_prog_MAKER install || exit 1
dnl TREINCDIR="$tre_prefix/include"
dnl AC_SUBST(TREINCDIR)
dnl if test "x$ac_cv_path_PKGCONFIG" = "x" ; then
dnl         TRELIBS="-L$tre_prefix/lib -ltre"
dnl else
dnl         TRELIBS=`$ac_cv_path_PKGCONFIG --libs tre.pc`
dnl fi
dnl AC_SUBST(TRELIBS)
dnl 
dnl cd $cur_dir

dnl libTRE (regex library) checking
tre_version="0.7.5"
withval=''
AC_ARG_WITH(tre,
[  --with-tre=PATH         Base path to where libtre is installed, such that 
                          PATH/lib/libtre.so and PATH/include/tre/regex.h exist.], )
if test "x$withval" != "x"; then
    AC_MSG_RESULT(Using include dir $withval to find libtre)
    CPPFLAGS="$CPPFLAGS -I$withval/include -L$withval/lib"
    LIBS="$LIBS -L$withval/lib"
else
    AC_MSG_RESULT([Looking for tre in system and home dirs (${HOME})...])
    CPPFLAGS="$CPPFLAGS -I${HOME}/include -L${HOME}/lib"
    LIBS="$LIBS -L${HOME}/lib"
fi
AC_CHECK_HEADER(tre/regex.h, , [AC_MSG_ERROR([tre/regex.h, the TRE regex headers, were not found. Install tre or use --with-tre=PATH to tell me how to find it, where PATH/include/tre/regex.h exists.  For conveniance, just type 'tools/tre_install.sh' now, to install tre in your home directory.])],)
AC_CHECK_LIB(tre, regexec, , [AC_MSG_ERROR([TRE regex library not found. Install tre, or use --with-tre=PATH to tell me how to find it, where PATH/lib/libtre.so exists. For conveniance, just type 'tools/tre_install.sh' now, to install tre in your home directory.])])

dnl core dumper checking
core_version="1.1"
withval=''
AC_ARG_WITH(coredumper,
[  --with-coredumper=PATH  Base path to where core dumper is installed, such
                          that PATH/lib/libcoredumper.so and 
                          PATH/include/google/coredumper.h exist.], )
if test "x$withval" != "x"; then
    AC_MSG_RESULT(Using include dir $withval to find coredumper)
    CPPFLAGS="$CPPFLAGS -I$withval/include -L$withval/lib"
    LIBS="$LIBS -L$withval/lib"
else
    AC_MSG_RESULT([Looking for coredumper in system and home dirs (${HOME})...])
    CPPFLAGS="$CPPFLAGS -I${HOME}/include -L${HOME}/lib"
    LIBS="$LIBS -Wl,--rpath -Wl,${HOME}/lib"
fi
AC_CHECK_HEADER(google/coredumper.h, , [AC_MSG_RESULT([google/coredumper.h, the coredumper headers, were not found. Install coredumper or use --with-coredumper=PATH to tell me how to find it, where PATH/include/google/coredumper.h exists.  For conveniance, just type 'tools/core_install.sh' now, to install coredumper in your home directory.])],)
AC_CHECK_LIB(coredumper, WriteCoreDump, , [AC_MSG_RESULT([Coredumper library not found. Install coredumper, or use --with-coredumper=PATH to tell me how to find it, where PATH/lib/libcoredumper.so exists. For conveniance, just type 'tools/core_install.sh' now, to install coredumper in your home directory.])])

dnl openssl checking
withval=''
AC_ARG_WITH(ssl,
[  --with-ssl=PATH      Base path to where openssl is installed],)
if test "x$withval" != "x"; then
   AC_MSG_RESULT(Using include dir $withval to find openssl)
   CPPFLAGS="$CPPFLAGS -I$withval/include -L$withval/lib"
   LIBS="$LIBS -L$withval/lib"
else
   AC_MSG_RESULT([Looking for openssl in system ])
fi

AC_CHECK_LIB(ssl, BIO_new,
[
LIBS="-lssl $LIBS"
AC_CHECK_HEADERS(openssl/bio.h,
[
AC_DEFINE(WITH_SSL, 1, [Define if SSL libs are linked])
ssl_message="LDAP library:        enabled"
],
[
if test "x$withval" != "x"; then
   AC_MSG_ERROR([ssl headers not found])
fi
])
],
[
if test "x$withval" != "x"; then
   AC_MSG_ERROR([libldap not found or not valid])
fi
]
)
AC_MSG_RESULT($LIBS)


dnl ldap checking
withval=''
AC_ARG_WITH(ldap,
[  --with-ldap=PATH    Base path to where the ldap library and headers are installed, 
                      such that PATH/include/ldap.h and PATH/lib/libldap.so exist.],)
if test "x$withval" != "x"; then
   AC_MSG_RESULT(Using include dir $withval to find libldap)
   CPPFLAGS="$CPPFLAGS -I$withval/include -L$withval/lib"
   LIBS="$LIBS -L$withval/lib"
else
   AC_MSG_RESULT([Looking for ldap in system ])
fi

AC_CHECK_LIB(ldap, ldap_simple_bind_s, 
[
LIBS="-lldap $LIBS"
AC_CHECK_HEADERS(ldap.h, 
[
AC_DEFINE(WITH_LDAP, 1, [Define if LDAP libs are linked])
ldap_message="LDAP library:       enabled"
],
[
if test "x$withval" != "x"; then
   AC_MSG_ERROR([ldap.h not found])
fi
])
],
[
if test "x$withval" != "x"; then
   AC_MSG_ERROR([libldap not found or not valid])
fi
]
)
AC_MSG_RESULT($LIBS)

AC_DEFINE_UNQUOTED(CODENAME, "${CODENAME}", [Code name for this release])
AC_SUBST(MODULE_OBJS)
AC_SUBST(MY_SUBDIRS)
AC_SUBST(RX_INCLUDES)
AC_SUBST(RX_LIBS)
AC_SUBST(TRACK)
AC_CONFIG_FILES(Makefile rx/Makefile src/Makefile)
AC_OUTPUT


dnl Print configuration summary

cat <<EOF

Configuration summary
=====================

X3 is now configured as follows:

* Compilation environment

  CC       = $CC
  CFLAGS   = $CFLAGS
  CPP      = $CPP
  CPPFLAGS = $CPPFLAGS
  LD       = $LD
  LDFLAGS  = $LDFLAGS
  LIBS     = $LIBS

* X3 options

  Debug:              $x3_debug
  Extra Modules:     $module_list
  Malloc:             $x3_malloc
  Protocol:           $x3_ircd
  Regexp Library      TRE $tre_version
  Coredumper Library  Coredumper $core_version
  $ldap_message 

  Install to:         $prefix

Now you can proceed with compiling X3

EOF

